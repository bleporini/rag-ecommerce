# This directive is mandatory, even if empty.
# It configures NGINX's connection processing capabilities.
events {
    # You can leave this empty to use the default values.
}

# This top-level block is necessary for NGINX to process HTTP traffic.
http {
    # Include the standard file that maps file extensions to MIME types.
    # This resolves the "duplicate MIME type" warning and ensures CSS, JS, etc., are served correctly.
    include /etc/nginx/mime.types;

    # The server block defines a virtual server to handle requests.
    server {
        listen 80;
        server_name localhost;

        location /chat/ {
                    # This is the path inside the container where our chat assets are.
                    root /usr/share/nginx/html;
        }

        location /langchain/{
            proxy_pass http://api:8001/;
        }

        location / {
            # The name 'shop' comes from your docker-compose service name.
            # NGINX uses Docker's internal DNS to find the container.
            proxy_pass http://shop; # Make sure your PHP app service is named 'shop'
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # --- FIX: ADD THIS LINE ---
            # This strips the compression header, forcing the backend to send plain text
            # so that sub_filter can work reliably.
            proxy_set_header Accept-Encoding "";

           # Inject the chat script before the closing body tag
            sub_filter '</body>' '<script type="text/javascript" src="/chat/chat.js"></script></body>';
            sub_filter_once on; # Ensures the replacement happens only once
            sub_filter_types text/html; # Only modify HTML files
        }
    }
}